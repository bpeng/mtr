// Code generated by protoc-gen-go.
// source: field.proto
// DO NOT EDIT!

package mtrpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// FieldMetricLatest is the latest value received for a field metric and thresholds for the metric.
// If upper == lower == 0 then no threshold has been set on the metric.
type FieldMetricLatest struct {
	// The deviceID for the metric e.g., idu-birchfarm
	DeviceID string `protobuf:"bytes,1,opt,name=device_iD,json=deviceID" json:"device_iD,omitempty"`
	// The typeID for the metric e.g., conn
	TypeID string `protobuf:"bytes,2,opt,name=type_iD,json=typeID" json:"type_iD,omitempty"`
	// Unix time in seconds for the metric value (don't need nanos).
	Seconds int64 `protobuf:"varint,3,opt,name=seconds" json:"seconds,omitempty"`
	// The value
	Value int32 `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
	// The upper threshold for the metric to be good.
	Upper int32 `protobuf:"varint,5,opt,name=upper" json:"upper,omitempty"`
	// The lower threshold for the metric to be good.
	Lower int32 `protobuf:"varint,6,opt,name=lower" json:"lower,omitempty"`
	// the modelID for the device e.g., "Trimble NetR9"
	ModelID string `protobuf:"bytes,7,opt,name=model_iD,json=modelID" json:"model_iD,omitempty"`
}

func (m *FieldMetricLatest) Reset()                    { *m = FieldMetricLatest{} }
func (m *FieldMetricLatest) String() string            { return proto.CompactTextString(m) }
func (*FieldMetricLatest) ProtoMessage()               {}
func (*FieldMetricLatest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type FieldMetricLatestResult struct {
	Result []*FieldMetricLatest `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *FieldMetricLatestResult) Reset()                    { *m = FieldMetricLatestResult{} }
func (m *FieldMetricLatestResult) String() string            { return proto.CompactTextString(m) }
func (*FieldMetricLatestResult) ProtoMessage()               {}
func (*FieldMetricLatestResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *FieldMetricLatestResult) GetResult() []*FieldMetricLatest {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*FieldMetricLatest)(nil), "mtrpb.FieldMetricLatest")
	proto.RegisterType((*FieldMetricLatestResult)(nil), "mtrpb.FieldMetricLatestResult")
}

var fileDescriptor1 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x59, 0xd7, 0x4d, 0xda, 0xe9, 0xc9, 0x20, 0x34, 0xe2, 0x45, 0x7a, 0xea, 0x69, 0x11,
	0x7d, 0x03, 0x59, 0x84, 0xa2, 0x5e, 0x72, 0xf4, 0x22, 0xed, 0x66, 0x84, 0x40, 0x6a, 0x42, 0x92,
	0xad, 0xf8, 0x76, 0x3e, 0x9a, 0xc9, 0xc4, 0x9e, 0xf6, 0x36, 0xdf, 0xf7, 0x0f, 0x0c, 0xff, 0xc0,
	0xea, 0xd3, 0xa0, 0xd5, 0xbd, 0x0f, 0x2e, 0x39, 0xd1, 0x1d, 0x53, 0xf0, 0x87, 0xcd, 0x6f, 0x03,
	0x57, 0xcf, 0x45, 0xbf, 0x61, 0x0a, 0x66, 0x7c, 0xdd, 0x27, 0x8c, 0x49, 0xdc, 0xc2, 0x52, 0xe3,
	0xc9, 0x8c, 0xf8, 0x61, 0x06, 0xd9, 0xdc, 0x35, 0xdb, 0xa5, 0x5a, 0x54, 0xb1, 0x1b, 0xc4, 0x1a,
	0x78, 0xfa, 0xf1, 0x14, 0x5d, 0x50, 0xc4, 0x0a, 0xe6, 0x40, 0x02, 0x8f, 0x38, 0xba, 0x2f, 0x1d,
	0x65, 0x9b, 0x83, 0x56, 0x9d, 0x51, 0x5c, 0x43, 0x77, 0xda, 0xdb, 0x09, 0xe5, 0x65, 0xf6, 0x9d,
	0xaa, 0x50, 0xec, 0xe4, 0x3d, 0x06, 0xd9, 0x55, 0x4b, 0x50, 0xac, 0x75, 0xdf, 0xd9, 0xb2, 0x6a,
	0x09, 0xc4, 0x0d, 0x2c, 0x8e, 0x4e, 0xa3, 0x2d, 0x57, 0x39, 0x5d, 0xe5, 0xc4, 0xbb, 0x61, 0xf3,
	0x02, 0xeb, 0x59, 0x03, 0x85, 0x71, 0xb2, 0x49, 0xdc, 0x03, 0x0b, 0x34, 0xe5, 0x12, 0xed, 0x76,
	0xf5, 0x20, 0x7b, 0x6a, 0xdd, 0xcf, 0xf7, 0xff, 0xf7, 0x9e, 0xf8, 0x7b, 0x7d, 0xcc, 0x81, 0xd1,
	0x9b, 0x1e, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xb9, 0x36, 0xdc, 0x35, 0x01, 0x00, 0x00,
}
